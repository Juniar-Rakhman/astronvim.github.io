"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[6463],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var i=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=i.createContext({}),u=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},c=function(n){var e=u(n.components);return i.createElement(l.Provider,{value:e},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),p=u(t),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return t?i.createElement(f,r(r({ref:e},c),{},{components:t})):i.createElement(f,r({ref:e},c))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[p]="string"==typeof n?n:a,r[1]=s;for(var u=2;u<o;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},13518:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var i=t(87462),a=(t(67294),t(3905));const o={id:"basic_configuration",title:"Basic Configuration"},r=void 0,s={unversionedId:"Configuration/basic_configuration",id:"Configuration/basic_configuration",title:"Basic Configuration",description:"Set Up User Configuration",source:"@site/docs/Configuration/basic_configuration.md",sourceDirName:"Configuration",slug:"/Configuration/basic_configuration",permalink:"/nightly/Configuration/basic_configuration",draft:!1,tags:[],version:"current",frontMatter:{id:"basic_configuration",title:"Basic Configuration"},sidebar:"docs",previous:{title:"Exposed Autocommands",permalink:"/nightly/Configuration/autocmds"},next:{title:"Configuration Mechanism",permalink:"/nightly/Configuration/config_mechanism"}},l={},u=[{value:"Set Up User Configuration",id:"set-up-user-configuration",level:2},{value:"Example User Configuration",id:"example-user-configuration",level:3}],c={toc:u},p="wrapper";function m(n){let{components:e,...t}=n;return(0,a.kt)(p,(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"set-up-user-configuration"},"Set Up User Configuration"),(0,a.kt)("p",null,"To begin making custom user configurations you must create a ",(0,a.kt)("inlineCode",{parentName:"p"},"user/")," folder. The provided example can be created with (please note the trailing slashes after the directory names)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cp -r ~/.config/nvim/lua/user_example/ ~/.config/nvim/lua/user/\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you want to keep your user configuration completely separate from the cloned repository, you can also put this folder in ",(0,a.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/astronvim/lua/user"),". AstroNvim adds the folder ",(0,a.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/astronvim")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"runtimepath")," so any ",(0,a.kt)("inlineCode",{parentName:"p"},"vimscript")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"lua")," files in there can be sourced.")),(0,a.kt)("h3",{id:"example-user-configuration"},"Example User Configuration"),(0,a.kt)("p",null,"Below is the provided user configuration template found at ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.config/nvim/lua/user/init.lua")," after the ",(0,a.kt)("inlineCode",{parentName:"p"},"cp")," command above."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For more details of the provided defaults for each plugin please refer to ",(0,a.kt)("a",{parentName:"p",href:"/configuration/plugin_defaults"},"Default Plugin Configurations")),(0,a.kt)("p",{parentName:"admonition"},"For an exhaustive list of all available options in the ",(0,a.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file please refer to ",(0,a.kt)("a",{parentName:"p",href:"/configuration/config_options"},"Available User Options"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--              AstroNvim Configuration Table\n-- All configuration changes should go inside of the table below\n\n-- A split up user configuration example can be found at: https://github.com/AstroNvim/split_user_example\n\n-- You can think of a Lua "table" as a dictionary like data structure the\n-- normal format is "key = value". These also handle array like data structures\n-- where a value with no key simply has an implicit numeric key\nlocal config = {\n\n  -- Configure AstroNvim updates\n  updater = {\n    remote = "origin", -- remote to use\n    channel = "stable", -- "stable" or "nightly"\n    version = "latest", -- "latest", tag name, or regex search like "v1.*" to only do updates before v2 (STABLE ONLY)\n    branch = "main", -- branch name (NIGHTLY ONLY)\n    commit = nil, -- commit hash (NIGHTLY ONLY)\n    pin_plugins = nil, -- nil, true, false (nil will pin plugins on stable only)\n    skip_prompts = false, -- skip prompts about breaking changes\n    show_changelog = true, -- show the changelog after performing an update\n    auto_quit = false, -- automatically quit the current session after a successful update\n    -- remotes = { -- easily add new remotes to track\n    --   ["remote_name"] = "https://remote_url.come/repo.git", -- full remote url\n    --   ["remote2"] = "github_user/repo", -- GitHub user/repo shortcut,\n    --   ["remote3"] = "github_user", -- GitHub user assume AstroNvim fork\n    -- },\n  },\n\n  -- Set colorscheme to use\n  colorscheme = "astrodark",\n\n  -- Add highlight groups in any theme\n  highlights = {\n    -- init = { -- this table overrides highlights in all themes\n    --   Normal = { bg = "#000000" },\n    -- }\n    -- duskfox = { -- a table of overrides/changes to the duskfox theme\n    --   Normal = { bg = "#000000" },\n    -- },\n  },\n\n  -- set vim options here (vim.<first_key>.<second_key> = value)\n  options = {\n    opt = {\n      -- set to true or false etc.\n      relativenumber = true, -- sets vim.opt.relativenumber\n      number = true, -- sets vim.opt.number\n      spell = false, -- sets vim.opt.spell\n      signcolumn = "auto", -- sets vim.opt.signcolumn to auto\n      wrap = false, -- sets vim.opt.wrap\n    },\n    g = {\n      mapleader = " ", -- sets vim.g.mapleader\n      autoformat_enabled = true, -- enable or disable auto formatting at start (lsp.formatting.format_on_save must be enabled)\n      cmp_enabled = true, -- enable completion at start\n      autopairs_enabled = true, -- enable autopairs at start\n      diagnostics_enabled = true, -- enable diagnostics at start\n      status_diagnostics_enabled = true, -- enable diagnostics in statusline\n      icons_enabled = true, -- disable icons in the UI (disable if no nerd font is available)\n      ui_notifications_enabled = true, -- disable notifications when toggling UI elements\n    },\n  },\n  -- If you need more control, you can use the function()...end notation\n  -- options = function(local_vim)\n  --   local_vim.opt.relativenumber = true\n  --   local_vim.g.mapleader = " "\n  --   local_vim.opt.whichwrap = vim.opt.whichwrap - { \'b\', \'s\' } -- removing option from list\n  --   local_vim.opt.shortmess = vim.opt.shortmess + { I = true } -- add to option list\n  --\n  --   return local_vim\n  -- end,\n\n  -- Diagnostics configuration (for vim.diagnostics.config({...})) when diagnostics are on\n  diagnostics = {\n    virtual_text = true,\n    underline = true,\n  },\n\n  -- Extend LSP configuration\n  lsp = {\n    -- enable servers that you already have installed without mason\n    servers = {\n      -- "pyright"\n    },\n    formatting = {\n      -- control auto formatting on save\n      format_on_save = {\n        enabled = true, -- enable or disable format on save globally\n        allow_filetypes = { -- enable format on save for specified filetypes only\n          -- "go",\n        },\n        ignore_filetypes = { -- disable format on save for specified filetypes\n          -- "python",\n        },\n      },\n      disabled = { -- disable formatting capabilities for the listed language servers\n        -- "lua_ls",\n      },\n      timeout_ms = 1000, -- default format timeout\n      -- filter = function(client) -- fully override the default formatting function\n      --   return true\n      -- end\n    },\n    -- easily add or disable built in mappings added during LSP attaching\n    mappings = {\n      n = {\n        -- ["<leader>lf"] = false -- disable formatting keymap\n      },\n    },\n    -- add to the global LSP on_attach function\n    -- on_attach = function(client, bufnr)\n    -- end,\n\n    -- override the LSP setup handler function based on server name\n    -- setup_handlers = {\n    --   -- first function changes the default setup handler\n    --   function(server, opts) require("lspconfig")[server].setup(opts) end,\n    --   -- keys for a specific server name will be used for that LSP\n    --   lua_ls = function(server, opts)\n    --     -- custom lua_ls setup handler\n    --     require("lspconfig")["lua_ls"].setup(opts)\n    --   end,\n    -- },\n\n    -- Add overrides for LSP server settings, the keys are the name of the server\n    config = {\n      -- example for addings schemas to yamlls\n      -- yamlls = { -- override table for require("lspconfig").yamlls.setup({...})\n      --   settings = {\n      --     yaml = {\n      --       schemas = {\n      --         ["http://json.schemastore.org/github-workflow"] = ".github/workflows/*.{yml,yaml}",\n      --         ["http://json.schemastore.org/github-action"] = ".github/action.{yml,yaml}",\n      --         ["http://json.schemastore.org/ansible-stable-2.9"] = "roles/tasks/*.{yml,yaml}",\n      --       },\n      --     },\n      --   },\n      -- },\n    },\n  },\n\n  -- Mapping data with "desc" stored directly by vim.keymap.set().\n  --\n  -- Please use this mappings table to set keyboard mapping since this is the\n  -- lower level configuration and more robust one. (which-key will\n  -- automatically pick-up stored data by this setting.)\n  mappings = {\n    -- first key is the mode\n    n = {\n      -- second key is the lefthand side of the map\n      -- mappings seen under group name "Buffer"\n      ["<leader>bb"] = { "<cmd>tabnew<cr>", desc = "New tab" },\n      ["<leader>bc"] = { "<cmd>BufferLinePickClose<cr>", desc = "Pick to close" },\n      ["<leader>bj"] = { "<cmd>BufferLinePick<cr>", desc = "Pick to jump" },\n      ["<leader>bt"] = { "<cmd>BufferLineSortByTabs<cr>", desc = "Sort by tabs" },\n      -- tables with the `name` key will be registered with which-key if it\'s installed\n      -- this is useful for naming menus\n      ["<leader>b"] = { name = "Buffers" },\n      -- quick save\n      -- ["<C-s>"] = { ":w!<cr>", desc = "Save File" },  -- change description but the same command\n    },\n    t = {\n      -- setting a mapping to false will disable it\n      -- ["<esc>"] = false,\n    },\n  },\n\n  -- Configure require("lazy").setup() options\n  lazy = {\n    defaults = { lazy = true },\n    performance = {\n      rtp = {\n        -- customize default disabled vim plugins\n        disabled_plugins = { "tohtml", "gzip", "matchit", "zipPlugin", "netrwPlugin", "tarPlugin", "matchparen" },\n      },\n    },\n  },\n\n  -- Configure plugins\n  plugins = {\n    -- You can disable default plugins as follows:\n    -- { "max397574/better-escape.nvim", enabled = false },\n    --\n    -- You can also easily customize additional setup of plugins that is outside of the plugin\'s setup call\n    -- {\n    --   "L3MON4D3/LuaSnip",\n    --   config = function(plugin, opts)\n    --     require "plugins.configs.luasnip"(plugin, opts) -- include the default astronvim config that calls the setup call\n    --     -- add more custom luasnip configuration such as filetype extend or custom snippets\n    --     local luasnip = require "luasnip"\n    --     luasnip.filetype_extend("javascript", { "javascriptreact" })\n    --   end,\n    -- },\n    -- {\n    --   "windwp/nvim-autopairs",\n    --   config = function(plugin, opts)\n    --     require "plugins.configs.nvim-autopairs"(plugin, opts) -- include the default astronvim config that calls the setup call\n    --     -- add more custom autopairs configuration such as custom rules\n    --     local npairs = require "nvim-autopairs"\n    --     local Rule = require "nvim-autopairs.rule"\n    --     local cond = require "nvim-autopairs.conds"\n    --     npairs.add_rules(\n    --       {\n    --         Rule("$", "$", { "tex", "latex" })\n    --           -- don\'t add a pair if the next character is %\n    --           :with_pair(cond.not_after_regex "%%")\n    --           -- don\'t add a pair if  the previous character is xxx\n    --           :with_pair(\n    --             cond.not_before_regex("xxx", 3)\n    --           )\n    --           -- don\'t move right when repeat character\n    --           :with_move(cond.none())\n    --           -- don\'t delete if the next character is xx\n    --           :with_del(cond.not_after_regex "xx")\n    --           -- disable adding a newline when you press <cr>\n    --           :with_cr(cond.none()),\n    --       },\n    --       -- disable for .vim files, but it work for another filetypes\n    --       Rule("a", "a", "-vim")\n    --     )\n    --   end,\n    -- },\n    -- By adding to the which-key config and using our helper function you can add more which-key registered bindings\n    -- {\n    --   "folke/which-key.nvim",\n    --   config = function(plugin, opts)\n    --     local wk = require "which-key"\n    --     wk.setup(opts) -- setup which-key\n    --     -- Add bindings which show up as group name\n    --     wk.register({\n    --       b = { name = "Buffer" },\n    --     }, { mode = "n", prefix = "<leader>" })\n    --   end,\n    -- },\n\n    -- You can also add new plugins here as well:\n    -- Add plugins, the lazy syntax\n    -- "andweeb/presence.nvim",\n    -- {\n    --   "ray-x/lsp_signature.nvim",\n    --   event = "BufRead",\n    --   config = function()\n    --     require("lsp_signature").setup()\n    --   end,\n    -- },\n\n    -- Plugin entries can also be used to override the default options for plugins as well\n    {\n      "goolord/alpha-nvim",\n      opts = function(_, opts)\n        -- customize the dashboard header\n        opts.section.header.val = {\n          " \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588",\n          "\u2588\u2588   \u2588\u2588 \u2588\u2588         \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588",\n          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588    \u2588\u2588",\n          "\u2588\u2588   \u2588\u2588      \u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588",\n          "\u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588    \u2588\u2588   \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588",\n          " ",\n          "    \u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2001   \u2588\u2588\u2588",\n          "    \u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588",\n          "    \u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588",\n          "    \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2588\u2588",\n          "    \u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001\u2001 \u2588\u2588\u2001\u2588\u2588\u2001 \u2001\u2001\u2001 \u2588\u2588",\n        }\n        return opts\n      end,\n    },\n    {\n      "jose-elias-alvarez/null-ls.nvim",\n      opts = function(_, config)\n        -- config variable is the default configuration table for the setup function call\n        -- local null_ls = require "null-ls"\n\n        -- Check supported formatters and linters\n        -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting\n        -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics\n        config.sources = {\n          -- Set a formatter\n          -- null_ls.builtins.formatting.stylua,\n          -- null_ls.builtins.formatting.prettier,\n        }\n        return config -- return final config table\n      end,\n    },\n    {\n      "nvim-treesitter/nvim-treesitter",\n      opts = {\n        -- ensure_installed = { "lua" },\n      },\n    },\n    -- use mason-lspconfig to configure LSP installations\n    {\n      "williamboman/mason-lspconfig.nvim",\n      -- overrides `require("mason-lspconfig").setup(...)`\n      opts = {\n        -- ensure_installed = { "lua_ls" },\n      },\n    },\n    -- use mason-null-ls to configure Formatters/Linter installation for null-ls sources\n    {\n      "jay-babu/mason-null-ls.nvim",\n      -- overrides `require("mason-null-ls").setup(...)`\n      opts = {\n        -- ensure_installed = { "prettier", "stylua" },\n      },\n    },\n    {\n      "jay-babu/mason-nvim-dap.nvim",\n      -- overrides `require("mason-nvim-dap").setup(...)`\n      opts = {\n        -- ensure_installed = { "python" },\n      },\n    },\n  },\n\n  -- Customize Heirline options\n  heirline = {\n    -- -- Customize different separators between sections\n    -- separators = {\n    --   breadcrumbs = " > ",\n    --   tab = { "\ue0ba", "\ue0b8" },\n    -- },\n    -- -- Customize colors for each element each element has a `_fg` and a `_bg`\n    -- colors = function(colors)\n    --   colors.git_branch_fg = require("astronvim.utils").get_hlgroup "Conditional"\n    --   return colors\n    -- end,\n    -- -- Customize attributes of highlighting in Heirline components\n    -- attributes = {\n    --   -- styling choices for each heirline element, check possible attributes with `:h attr-list`\n    --   git_branch = { bold = true }, -- bold the git branch statusline component\n    -- },\n    -- -- Customize if icons should be highlighted\n    -- icon_highlights = {\n    --   breadcrumbs = false, -- LSP symbols in the breadcrumbs\n    --   file_icon = {\n    --     winbar = false, -- Filetype icon in the winbar inactive windows\n    --     statusline = true, -- Filetype icon in the statusline\n    --     tabline = true, -- Filetype icon in the tabline\n    --   },\n    -- },\n  },\n\n  -- This function is run last and is a good place to configuring\n  -- augroups/autocommands and custom filetypes also this just pure lua so\n  -- anything that doesn\'t fit in the normal config locations above can go here\n  polish = function()\n    -- Set up custom filetypes\n    -- vim.filetype.add {\n    --   extension = {\n    --     foo = "fooscript",\n    --   },\n    --   filename = {\n    --     ["Foofile"] = "fooscript",\n    --   },\n    --   pattern = {\n    --     ["~/%.config/foo/.*"] = "fooscript",\n    --   },\n    -- }\n  end,\n}\n\nreturn config\n')))}m.isMDXComponent=!0}}]);