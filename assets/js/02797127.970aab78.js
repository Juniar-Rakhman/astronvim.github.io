"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[664],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},f={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),p=u(t),g=i,m=p["".concat(s,".").concat(g)]||p[g]||f[g]||o;return t?r.createElement(m,a(a({ref:e},c),{},{components:t})):r.createElement(m,a({ref:e},c))}));function g(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:i,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4985:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return f}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],l={id:"basic_configuration",title:"Basic Configuration"},s=void 0,u={unversionedId:"configuration/basic_configuration",id:"configuration/basic_configuration",title:"Basic Configuration",description:"Set Up User Configuration",source:"@site/docs/configuration/basic_configuration.md",sourceDirName:"configuration",slug:"/configuration/basic_configuration",permalink:"/configuration/basic_configuration",tags:[],version:"current",frontMatter:{id:"basic_configuration",title:"Basic Configuration"},sidebar:"docs",previous:{title:"Managing User Configuration",permalink:"/configuration/manage_user_config"},next:{title:"Default Plugin Configurations",permalink:"/configuration/plugin_defaults"}},c={},f=[{value:"Set Up User Configuration",id:"set-up-user-configuration",level:2},{value:"Example User Configuration",id:"example-user-configuration",level:3}],p={toc:f};function g(n){var e=n.components,t=(0,i.Z)(n,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"set-up-user-configuration"},"Set Up User Configuration"),(0,o.kt)("p",null,"To begin making custom user configurations you must create a ",(0,o.kt)("inlineCode",{parentName:"p"},"user/")," folder. The provided example can be created with (please note the trailing slashes after the directory names)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cp -r ~/.config/nvim/lua/user_example/ ~/.config/nvim/lua/user/\n")),(0,o.kt)("h3",{id:"example-user-configuration"},"Example User Configuration"),(0,o.kt)("p",null,"Below is the provided user configuration template found at ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.config/nvim/lua/user/init.lua")," after the ",(0,o.kt)("inlineCode",{parentName:"p"},"cp")," command above."),(0,o.kt)("p",null,"::tip"),(0,o.kt)("p",null,"For more details of the provided defaults for each plugin please refer to ",(0,o.kt)("a",{parentName:"p",href:"/configuration/plugin_defaults"},"Default Plugin Configurations")),(0,o.kt)("p",null,"For an exhaustive list of all available options in the ",(0,o.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file please refer to ",(0,o.kt)("a",{parentName:"p",href:"/configuration/config_options"},"Available User Options")),(0,o.kt)("p",null,":::"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local config = {\n\n  -- Set colorscheme\n  colorscheme = "default_theme",\n\n  -- Default theme configuration\n  default_theme = {\n    diagnostics_style = "none",\n    -- Modify the color table\n    colors = {\n      fg = "#abb2bf",\n    },\n    -- Modify the highlight groups\n    highlights = function(highlights)\n      local C = require "default_theme.colors"\n\n      highlights.Normal = { fg = C.fg, bg = C.bg }\n      return highlights\n    end,\n  },\n\n  -- Disable default plugins\n  enabled = {\n    bufferline = true,\n    neo_tree = true,\n    lualine = true,\n    gitsigns = true,\n    colorizer = true,\n    toggle_term = true,\n    comment = true,\n    symbols_outline = true,\n    indent_blankline = true,\n    dashboard = true,\n    which_key = true,\n    neoscroll = true,\n    ts_rainbow = true,\n    ts_autotag = true,\n  },\n\n  -- Disable AstroNvim ui features\n  ui = {\n    nui_input = true,\n    telescope_select = true,\n  },\n\n  -- Configure plugins\n  plugins = {\n    -- Add plugins, the packer syntax without the "use"\n    init = {\n      -- { "andweeb/presence.nvim" },\n      -- {\n      --   "ray-x/lsp_signature.nvim",\n      --   event = "BufRead",\n      --   config = function()\n      --     require("lsp_signature").setup()\n      --   end,\n      -- },\n    },\n    -- All other entries override the setup() call for default plugins\n    -- override require("nvim-treesitter.configs").setup() options\n    treesitter = {\n    --   ensure_installed = { "lua" },\n    },\n    -- override require("packer").setup() configuration options\n    packer = {\n      compile_path = vim.fn.stdpath "config" .. "/lua/packer_compiled.lua",\n    },\n  },\n\n  -- Add paths for including more VS Code style snippets in luasnip\n  luasnip = {\n    vscode_snippet_paths = {},\n  },\n\n  -- Modify which-key registration\n  ["which-key"] = {\n    -- Add bindings to the normal mode <leader> mappings\n    register_n_leader = {\n      -- ["N"] = { "<cmd>tabnew<cr>", "New Buffer" },\n    },\n  },\n\n  -- Extend LSP configuration\n  lsp = {\n    -- add to the server on_attach function\n    -- on_attach = function(client, bufnr)\n    -- if client.name == "sqls" then\n    --   require("sqls").on_attach(client, bufnr)\n    -- end\n    -- end,\n\n    -- override the lsp installer server-registration function\n    -- server_registration = function(server, opts)\n    --   server:setup(opts)\n    -- end\n\n    -- Add overrides for LSP server settings, the keys are the name of the server\n    -- ["server-settings"] = {\n      -- example for addings schemas to yamlls\n      -- yamlls = {\n      --   settings = {\n      --     yaml = {\n      --       schemas = {\n      --         ["http://json.schemastore.org/github-workflow"] = ".github/workflows/*.{yml,yaml}",\n      --         ["http://json.schemastore.org/github-action"] = ".github/action.{yml,yaml}",\n      --         ["http://json.schemastore.org/ansible-stable-2.9"] = "roles/tasks/*.{yml,yaml}",\n      --       },\n      --     },\n      --   },\n      -- },\n    -- },\n  },\n\n  -- Diagnostics configuration (for vim.diagnostics.config())\n  diagnostics = {\n    virtual_text = true,\n    underline = true,\n  },\n\n  -- null-ls configuration\n  ["null-ls"] = function()\n    -- Formatting and linting\n    -- https://github.com/jose-elias-alvarez/null-ls.nvim\n    local status_ok, null_ls = pcall(require, "null-ls")\n    if not status_ok then\n      return\n    end\n\n    -- Check supported formatters\n    -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting\n    local formatting = null_ls.builtins.formatting\n\n    -- Check supported linters\n    -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics\n    local diagnostics = null_ls.builtins.diagnostics\n\n    null_ls.setup {\n      debug = false,\n      sources = {\n        -- Set a formatter\n        -- formatting.rufo,\n        -- Set a linter\n        -- diagnostics.rubocop,\n      },\n      -- NOTE: You can remove this on attach function to disable format on save\n      on_attach = function(client)\n        if client.resolved_capabilities.document_formatting then\n          vim.api.nvim_create_autocmd("BufWritePre", {\n            desc = "Auto format before save",\n            pattern = "<buffer>",\n            callback = vim.lsp.buf.formatting_sync,\n          })\n        end\n      end,\n    }\n  end,\n\n  -- This function is run last\n  -- good place to configure mappings and vim options\n  polish = function()\n    local map = vim.keymap.set\n    local set = vim.opt\n    -- Set options\n    set.relativenumber = true\n\n    -- Set key bindings\n    map("n", "<C-s>", ":w!<CR>")\n\n    -- Set autocommands\n    vim.api.nvim_create_augroup "packer_conf"\n    vim.api.nvim_create_autocmd("BufWritePost", {\n      desc = "Sync packer after modifying plugins.lua",\n      group = "packer_conf",\n      pattern = "plugins.lua",\n      command = "source <afile> | PackerSync",\n    })\n  end,\n}\n\nreturn config\n')))}g.isMDXComponent=!0}}]);