"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[4465],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[c]="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},46753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={id:"autopairs",title:"Customize Autopairs"},o=void 0,u={unversionedId:"Recipes/autopairs",id:"Recipes/autopairs",title:"Customize Autopairs",description:"Add Custom Rules to nvim-autopairs",source:"@site/docs/Recipes/autopairs.md",sourceDirName:"Recipes",slug:"/Recipes/autopairs",permalink:"/nightly/Recipes/autopairs",draft:!1,tags:[],version:"current",frontMatter:{id:"autopairs",title:"Customize Autopairs"},sidebar:"docs",previous:{title:"Dashboard Customizations",permalink:"/nightly/Recipes/alpha"},next:{title:"Disable cmdheight=0",permalink:"/nightly/Recipes/cmdheight"}},l={},s=[{value:"Add Custom Rules to <code>nvim-autopairs</code>",id:"add-custom-rules-to-nvim-autopairs",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"add-custom-rules-to-nvim-autopairs"},"Add Custom Rules to ",(0,i.kt)("inlineCode",{parentName:"h3"},"nvim-autopairs")),(0,i.kt)("p",null,"We have provided a simple API in the user configuration to easily add custom rules to ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-autopairs"),". This is done with the ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-autopairs.add_rules")," table. Here is a example minimal ",(0,i.kt)("inlineCode",{parentName:"p"},"user/init.lua")," configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  ["nvim-autopairs"] = function()\n    -- require Rule function\n    local Rule = require "nvim-autopairs.rule"\n    return {\n      -- return table that is used in `npairs.add_rules({...})` call\n      add_rules = {\n        -- specify a list of rules to add\n        Rule(" ", " "):with_pair(function(opts)\n          local pair = opts.line:sub(opts.col - 1, opts.col)\n          return vim.tbl_contains({ "()", "[]", "{}" }, pair)\n        end),\n        Rule("( ", " )")\n          :with_pair(function() return false end)\n          :with_move(function(opts) return opts.prev_char:match ".%)" ~= nil end)\n          :use_key ")",\n        Rule("{ ", " }")\n          :with_pair(function() return false end)\n          :with_move(function(opts) return opts.prev_char:match ".%}" ~= nil end)\n          :use_key "}",\n        Rule("[ ", " ]")\n          :with_pair(function() return false end)\n          :with_move(function(opts) return opts.prev_char:match ".%]" ~= nil end)\n          :use_key "]",\n      },\n    }\n  end,\n}\n')),(0,i.kt)("p",null,"Here we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"function")," notation so that we can run ",(0,i.kt)("inlineCode",{parentName:"p"},"require")," safely on ",(0,i.kt)("inlineCode",{parentName:"p"},"nvim-autopairs"),". Another approach is to split up your configuration and put the following in ",(0,i.kt)("inlineCode",{parentName:"p"},"user/nvim-autopairs.lua")," which will automatically be loaded when it is needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Rule = require "nvim-autopairs.rule"\n\nreturn {\n  -- return table that is used in `npairs.add_rules({...})` call\n  add_rules = {\n    -- specify a list of rules to add\n    Rule(" ", " "):with_pair(function(opts)\n      local pair = opts.line:sub(opts.col - 1, opts.col)\n      return vim.tbl_contains({ "()", "[]", "{}" }, pair)\n    end),\n    Rule("( ", " )")\n      :with_pair(function() return false end)\n      :with_move(function(opts) return opts.prev_char:match ".%)" ~= nil end)\n      :use_key ")",\n    Rule("{ ", " }")\n      :with_pair(function() return false end)\n      :with_move(function(opts) return opts.prev_char:match ".%}" ~= nil end)\n      :use_key "}",\n    Rule("[ ", " ]")\n      :with_pair(function() return false end)\n      :with_move(function(opts) return opts.prev_char:match ".%]" ~= nil end)\n      :use_key "]",\n  },\n}\n')))}c.isMDXComponent=!0}}]);