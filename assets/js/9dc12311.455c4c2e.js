"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[5445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),f=a,m=c["".concat(s,".").concat(f)]||c[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={id:"alpha",title:"Dashboard Customizations"},i=void 0,l={unversionedId:"recipes/alpha",id:"version-1.7.0/recipes/alpha",title:"Dashboard Customizations",description:"Customize Alpha Header",source:"@site/versioned_docs/version-1.7.0/recipes/alpha.md",sourceDirName:"recipes",slug:"/recipes/alpha",permalink:"/1.7.0/recipes/alpha",draft:!1,tags:[],version:"1.7.0",frontMatter:{id:"alpha",title:"Dashboard Customizations"},sidebar:"docs",previous:{title:"Custom VS Code Style Snippets",permalink:"/1.7.0/recipes/snippets"},next:{title:"Disable Global Statusbar",permalink:"/1.7.0/recipes/globalstatus"}},s={},u=[{value:"Customize Alpha Header",id:"customize-alpha-header",level:3},{value:"Open Alpha Automatically When No More Buffers",id:"open-alpha-automatically-when-no-more-buffers",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"customize-alpha-header"},"Customize Alpha Header"),(0,a.kt)("p",null,"If you want to customize your header on the dashboard you can do this easily in the ",(0,a.kt)("inlineCode",{parentName:"p"},"user/init.lua"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  header = {\n    "    My Custom ",\n    " Dashboard Header",\n  },\n}\n')),(0,a.kt)("h3",{id:"open-alpha-automatically-when-no-more-buffers"},"Open Alpha Automatically When No More Buffers"),(0,a.kt)("p",null,"If you want to make the Alpha dashboard open automatically when you close the last buffer in your session you can add the following in your ",(0,a.kt)("inlineCode",{parentName:"p"},"user/init.lua")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"polish")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  polish = function()\n    local function alpha_on_bye(cmd)\n      local bufs = vim.fn.getbufinfo { buflisted = true }\n      vim.cmd(cmd)\n      if require("core.utils").is_available "alpha-nvim" and not bufs[2] then\n        require("alpha").start(true)\n      end\n    end\n    vim.keymap.del("n", "<leader>c")\n    if require("core.utils").is_available "bufdelete.nvim" then\n      vim.keymap.set("n", "<leader>c", function()\n        alpha_on_bye "Bdelete!"\n      end, { desc = "Close buffer" })\n    else\n      vim.keymap.set("n", "<leader>c", function()\n        alpha_on_bye "bdelete!"\n      end, { desc = "Close buffer" })\n    end\n  end,\n}\n')))}c.isMDXComponent=!0}}]);