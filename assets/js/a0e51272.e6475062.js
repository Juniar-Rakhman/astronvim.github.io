"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[854],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=p(n),m=a,d=f["".concat(o,".").concat(m)]||f[m]||c[m]||i;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7543:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],s={id:"manual_lsp",title:"Manually Add LSP"},o=void 0,p={unversionedId:"recipes/manual_lsp",id:"recipes/manual_lsp",title:"Manually Add LSP",description:"AstroNvim comes with nvim-lsp-installer as an easy interface for setting up and installing language servers, but this might not be adequate for all users. The LSP installer doesn't support all of the language servers that Neovim's LSP config supports and some users may already have the language servers installed on their machine and don't want to reinstall it separately. In these cases the user can easily do a more traditional LSP set up workflow in their user/init.lua file in the polish function and utilizing the provided LSP on_attach function and capabilities. The following is a minimal user/init.lua file that simply sets up pyright language server for a user with pyright already available on their system:",source:"@site/docs/recipes/manual_lsp.md",sourceDirName:"recipes",slug:"/recipes/manual_lsp",permalink:"/recipes/manual_lsp",tags:[],version:"current",frontMatter:{id:"manual_lsp",title:"Manually Add LSP"},sidebar:"docs",previous:{title:"Disable Global Statusbar",permalink:"/recipes/globalstatus"},next:{title:"NvChad Telescope Theme",permalink:"/recipes/telescope_theme"}},u={},c=[],f={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"AstroNvim comes with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/williamboman/nvim-lsp-installer"},"nvim-lsp-installer")," as an easy interface for setting up and installing language servers, but this might not be adequate for all users. The LSP installer doesn't support all of the language servers that Neovim's LSP config supports and some users may already have the language servers installed on their machine and don't want to reinstall it separately. In these cases the user can easily do a more traditional LSP set up workflow in their ",(0,i.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"polish")," function and utilizing the provided LSP ",(0,i.kt)("inlineCode",{parentName:"p"},"on_attach")," function and ",(0,i.kt)("inlineCode",{parentName:"p"},"capabilities"),". The following is a minimal ",(0,i.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file that simply sets up ",(0,i.kt)("inlineCode",{parentName:"p"},"pyright")," language server for a user with ",(0,i.kt)("inlineCode",{parentName:"p"},"pyright")," already available on their system:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  polish = function()\n    local lsp_avail, lspconfig = pcall(require, "lspconfig") -- require lspconfig\n    if lsp_avail then -- if lspconfig is available (simple error handling)\n      local handlers = require "configs.lsp.handlers" -- get the internal lsp handler objects\n      lspconfig.pyright.setup { -- call the setup for whatever language server you want\n        on_attach = handlers.on_attach, -- internal on_attach function used by lsp installer\n        capabilities = handlers.capabilities, -- internal capabilities of AstroNvim\n      }\n    end\n  end,\n}\n')))}m.isMDXComponent=!0}}]);