"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[817],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(t),h=o,d=m["".concat(l,".").concat(h)]||m[h]||p[h]||i;return t?r.createElement(d,a(a({ref:n},u),{},{components:t})):r.createElement(d,a({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5334:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={id:"colorscheme",title:"Custom Colorscheme"},l=void 0,s={unversionedId:"recipes/colorscheme",id:"recipes/colorscheme",title:"Custom Colorscheme",description:"Using a Custom Colorscheme Before Plugin Installed",source:"@site/docs/recipes/colorscheme.md",sourceDirName:"recipes",slug:"/recipes/colorscheme",permalink:"/recipes/colorscheme",tags:[],version:"current",frontMatter:{id:"colorscheme",title:"Custom Colorscheme"},sidebar:"docs",previous:{title:"Black Belt Example User Configs",permalink:"/recipes/black_belt"},next:{title:"Customize cmp Completion",permalink:"/recipes/cmp"}},u={},p=[{value:"Using a Custom Colorscheme Before Plugin Installed",id:"using-a-custom-colorscheme-before-plugin-installed",level:2},{value:"Using a Custom Colorscheme Configured with Global Variables",id:"using-a-custom-colorscheme-configured-with-global-variables",level:2}],m={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"using-a-custom-colorscheme-before-plugin-installed"},"Using a Custom Colorscheme Before Plugin Installed"),(0,i.kt)("p",null,"One thing that might be an annoyance is if you are using a custom colorscheme in your user configuration and are trying to set it before the plugin is installed. It is recommended to add a check before setting the colorscheme in your ",(0,i.kt)("inlineCode",{parentName:"p"},"init.lua")," file before setting it. For example if you want to use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/catppuccin/nvim"},"Catppuccin"),". The typical way to tell AstroNvim to use a colorscheme in your ",(0,i.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  colorscheme = "catppuccin",\n\n  plugins = {\n    init = {\n      {\n        "catppuccin/nvim",\n        as = "catppuccin",\n        config = function()\n          require("catppuccin").setup {}\n        end,\n      },\n    },\n  },\n}\n')),(0,i.kt)("p",null,"If this is set up in a clean environment there will be an error when trying to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"colorscheme")," because ",(0,i.kt)("inlineCode",{parentName:"p"},"catppuccin")," has not been installed yet on the initial loading. This can be resolved with something like the following in the ",(0,i.kt)("inlineCode",{parentName:"p"},"user/init.lua")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local colorscheme = "default_theme"\nlocal theme_installed, _ = pcall(require, "catppuccin")\nif theme_installed then\n  colorscheme = "catppuccin"\nend\n\nreturn {\n  colorscheme = colorscheme,\n\n  plugins = {\n    init = {\n      {\n        "catppuccin/nvim",\n        as = "catppuccin",\n        config = function()\n          require("catppuccin").setup {}\n        end,\n      },\n    },\n  },\n}\n')),(0,i.kt)("h2",{id:"using-a-custom-colorscheme-configured-with-global-variables"},"Using a Custom Colorscheme Configured with Global Variables"),(0,i.kt)("p",null,"Some colorscheme plugins are configured through global variables rather than Lua functions like ",(0,i.kt)("inlineCode",{parentName:"p"},"setup()")," so they require a slightly different setup in Packer to get them working correctly. For example if we want to use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sainnhe/sonokai"},"Sonokai"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  plugins = {\n    init = {\n      {\n        "sainnhe/sonokai",\n        config = function()\n          vim.g.sonokai_style = "shusia"\n          vim.cmd "colorscheme sonokai"\n        end,\n      },\n    },\n  },\n}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This approach also handles the case when the colorscheme is not installed yet and AstroNvim will not try to set it."))))}h.isMDXComponent=!0}}]);